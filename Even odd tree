/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isEvenOddTree(TreeNode root) {
        int level = 1;
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        if(root.val % 2 == 0) return false;
        while(!q.isEmpty()) {
            int size = q.size();
            int prev = level % 2 == 0 ? Integer.MIN_VALUE : Integer.MAX_VALUE; 
            for(int i = 0;i < size;i++) {
                TreeNode curr = q.poll();
                if(curr.left != null) {
                    q.offer(curr.left);
                    if(level % 2 == 0){
                        if(curr.left.val <= prev || curr.left.val % 2 == 0) return false;
                    }
                    else {
                        if(curr.left.val >= prev || curr.left.val % 2 != 0) return false;
                    }
                    prev = curr.left.val;
                }
                if(curr.right != null) {
                    q.offer(curr.right);
                    if(level % 2 == 0){
                        if(curr.right.val <= prev || curr.right.val % 2 == 0) return false;
                    }
                    else {
                        if(curr.right.val >= prev || curr.right.val % 2 != 0) return false;
                    }
                    prev = curr.right.val;
                }
                
            }
            level++;
        }
        return true;
    }
}
