class Solution {
    public int findMaxLength(int[] nums) {
        HashMap<Integer,Integer> preSum = new HashMap<>();
        preSum.put(0,-1);
        int sum = 0;
        int max = 0;
        for(int i = 0;i < nums.length;i++) {
            if(nums[i] == 0) {
                sum = sum-1;
            }
            else sum += 1;
            if(preSum.containsKey(sum)) {
                max = Math.max(max,i - preSum.get(sum));
            }
            else preSum.put(sum,i);
        }
        return max;
    }
}
// councept of prefix sum HashMap is used.
// we cal. prefix sum for each index, whenever we get 0, we subtract 1 from sum(i.e equal no. of 1s and 0s means prefix sum would be same).
// we check if prefix sum - 0 is present or not, if present we cal. length and store in max and we won't update map(since we want maxSize), else if prefix sum in not
there in map, we will put in the map with respective index.
