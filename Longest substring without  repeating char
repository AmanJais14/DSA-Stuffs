class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character,Integer> map = new HashMap<>();
        int count = 0;
        for(int i = 0,j = 0;i < s.length();i++) {
            if(map.containsKey(s.charAt(i))) {
                j = Math.max(j,map.get(s.charAt(i)) + 1);
            }
            count = Math.max(count,i - j + 1);
            map.put(s.charAt(i),i);
        }
        return count;
    }
}
Using sliding window concept, whenever we get a repeating character we find its previous index using HMap & move left ptr to next index(found in HMap), store the difference in count, and return max. count.
 Note: whenever we get repeating character ensure left ptr is at its max value because repeating character's index may be before left ptr.
