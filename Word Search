class Solution {
    public boolean exist(char[][] board, String word) {
        boolean[][] visited = new boolean[board.length][board[0].length];
        for(int i = 0;i < board.length;i++) {
            for(int j = 0;j < board[0].length;j++) {
                if(board[i][j] == word.charAt(0)) {
                    if(wordExists(board,i,j,visited,word,0)){
                        return true;
                    }
                }
            }
        }
        return false;
    }
    private boolean wordExists(char[][] board,int i,int j,boolean[][] visited,String word,int index) {
        if(i >= board.length || i < 0 || j < 0 || j >= board[0].length) return false;
        if(visited[i][j]) return false;
        if(index == word.length()-1 && board[i][j] == word.charAt(index)) return true;
        if(board[i][j] != word.charAt(index)) return false;
        visited[i][j] = true;
        boolean up = wordExists(board,i - 1,j,visited,word,index + 1);
        boolean down = wordExists(board,i + 1,j,visited,word,index + 1);
        boolean left = wordExists(board,i,j - 1,visited,word,index + 1);
        boolean right = wordExists(board,i,j + 1,visited,word,index + 1);
        visited[i][j] = false;
        return up || left || down || right;
    }
}
for each found character mark it visited check its up,left,down,right, if any of its true return true. Make sure to mark each found character to unvisited after checking all direction
